webpackJsonp([37651121599412],{'./node_modules/babel-loader/lib/index.js?{"plugins":["/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js","/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-plugin-add-module-exports/lib/index.js","/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-plugin-transform-object-assign/lib/index.js"],"presets":[["/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-preset-env/lib/index.js",{"loose":true,"uglify":true,"modules":"commonjs","targets":{"browsers":["> 1%","last 2 versions","IE >= 9"]},"exclude":["transform-regenerator","transform-es2015-typeof-symbol"]}],"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-preset-stage-0/lib/index.js","/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-preset-react/lib/index.js"],"cacheDirectory":true}!./src/pages/02-first-grid.js':function(e,t,l){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var n=l("./node_modules/react/react.js"),r=a(n),d=l("./src/components/layout/Main.js"),o=a(d),i=l("./src/components/CodeBlock.js"),s=a(i),u=l("./src/components/layout/DevHomework.js"),c=a(u),m=function(){return r.default.createElement("div",null,r.default.createElement("h2",null,"Your First Grid"),r.default.createElement("h4",null,"Create a grid"),r.default.createElement("p",null,"The first thing we want to do is to create a grid container. We can do this by declaring"," ",r.default.createElement("code",null,"display: grid")," on the container element. In this example we are using a div with the class of ",r.default.createElement("code",null,"container"),"."),r.default.createElement("h4",null,"Define rows and columns"),r.default.createElement("p",null,"There are many ways to do define rows and columns, but for our first grid, we will be using the ",r.default.createElement("code",null,"grid-template-columns")," and ",r.default.createElement("code",null,"grid-template-rows")," properties. These properties allow us to define the size of the rows and columns for our grid. If we want to create three fixed-height rows of 150px and three fixed-width columns of 150px, then we simply write:"),r.default.createElement(s.default,null,"\ngrid-template-columns: 150px 150px 150px;\ngrid-template-rows: 150px 150px;\n      "),r.default.createElement("p",null,"If we want to add a fourth column that is 70px wide, we can write:"),r.default.createElement(s.default,null,"\ngrid-template-columns: 150px 150px 70px;\n      "),r.default.createElement("p",null,"...and so on."),r.default.createElement("h4",null,"Add a gutter"),r.default.createElement("p",null,"Adding a gutter to your grid is amazingly easy with CSS Grid Layout. Simply add:"),r.default.createElement(s.default,null,"\ngrid-gap: 1rem;\n      "),r.default.createElement("p",null,"With that simple line, we now have an equal-sized gutter between all rows and columns. If you wish to define the gutter size for columns and rows individually, you can use the",r.default.createElement("code",null,"grid-column-gap")," and ",r.default.createElement("code",null,"grid-row-gap")," properties instead."),r.default.createElement("p",null,"Now let's put that all together. Here is our HTML:"),r.default.createElement(s.default,null,'\n<div class="container">\n  <div class="item item1"></div>\n  <div class="item item2"></div>\n  <div class="item item3"></div>\n  <div class="item item4"></div>\n  <div class="item item5"></div>\n  <div class="item item5"></div>\n</div>\n      '),r.default.createElement("p",null,"With just a few lines of CSS, we can create a simple grid:"),r.default.createElement(s.default,null,"\n.container {\ndisplay: grid;\ngrid-template-columns: 150px 150px 150px;\ngrid-template-rows: 150px 150px;\ngrid-gap: 1rem;\n}\n      "),r.default.createElement("p",null,"And the result:"),r.default.createElement("div",{className:"container-2"},r.default.createElement("div",{className:"item"}),r.default.createElement("div",{className:"item"}),r.default.createElement("div",{className:"item"}),r.default.createElement("div",{className:"item"}),r.default.createElement("div",{className:"item"}),r.default.createElement("div",{className:"item"})))},p=function(){return r.default.createElement(c.default,null,r.default.createElement("p",null,"Amazing right? Inspect the grid above with your browser's developer tools. Try changing the column width, or the row height. Swap out the ",r.default.createElement("code",null,"grid-gap")," property with the",r.default.createElement("code",null,"grid-column-gap")," and ",r.default.createElement("code",null,"grid-row-gap")," properties and play around with different widths and heights."),r.default.createElement("p",null,"Having a good set of developer tools when working with CSS Grid Layout is essential. Firefox has some fantastic features that are specifically built to help you create and design grids. Intrigued?"),r.default.createElement("p",null,"Click to the next section to learn about Firefox's CSS Grid Layout Panel."))};t.default=function(){return r.default.createElement(o.default,{currentPageNum:2,tutorial:r.default.createElement(m,null),homework:r.default.createElement(p,null)})},e.exports=t.default}});
//# sourceMappingURL=component---src-pages-02-first-grid-js-8594fd6888f3454e2b8c.js.map