{"version":3,"sources":["webpack:///component---src-pages-02-first-grid-js-411aafdbaae73bba5964.js","webpack:///./src/pages/02-first-grid.js"],"names":["webpackJsonp","./node_modules/babel-loader/lib/index.js?{\"plugins\":[\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\",\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-plugin-add-module-exports/lib/index.js\",\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-plugin-transform-object-assign/lib/index.js\"],\"presets\":[[\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-preset-env/lib/index.js\",{\"loose\":true,\"uglify\":true,\"modules\":\"commonjs\",\"targets\":{\"browsers\":[\"> 1%\",\"last 2 versions\",\"IE >= 9\"]},\"exclude\":[\"transform-regenerator\",\"transform-es2015-typeof-symbol\"]}],\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-preset-stage-0/lib/index.js\",\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-preset-react/lib/index.js\"],\"cacheDirectory\":true}!./src/pages/02-first-grid.js","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_Main","_Main2","_CodeBlock","_CodeBlock2","_DevHomework","_DevHomework2","Tutorial","createElement","className","Homework","currentPageNum","tutorial","homework"],"mappings":"AAAAA,cAAc,iBAERC,o9BACA,SAAUC,EAAQC,EAASC,GAEhC,YAoBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GAlBvFH,EAAQI,YAAa,CCPtB,IAAAE,GAAAL,EAAA,iCDWKM,EAAUL,EAAuBI,GCVtCE,EAAAP,EAAA,mCDcKQ,EAASP,EAAuBM,GCbrCE,EAAAT,EAAA,iCDiBKU,EAAcT,EAAuBQ,GChB1CE,EAAAX,EAAA,0CDoBKY,EAAgBX,EAAuBU,GClBtCE,EAAW,iBACfP,GAAAF,QAAAU,cAAA,WACER,EAAAF,QAAAU,cAAA,6BAEAR,EAAAF,QAAAU,cAAA,2BACAR,EAAAF,QAAAU,cAAA,iGACwF,IACtFR,EAAAF,QAAAU,cAAA,6BAFF,mFAGeR,EAAAF,QAAAU,cAAA,yBAHf,KAMAR,EAAAF,QAAAU,cAAA,qCACAR,EAAAF,QAAAU,cAAA,yGAEER,EAAAF,QAAAU,cAAA,qCAFF,QAEyCR,EAAAF,QAAAU,cAAA,kCAFzC,yLAOAR,EAAAF,QAAAU,cAAAJ,EAAAN,QAAA,8FAOAE,EAAAF,QAAAU,cAAA,6DAEAR,EAAAF,QAAAU,cAAAJ,EAAAN,QAAA,2DAMAE,EAAAF,QAAAU,cAAA,8CAEAR,EAAAF,QAAAU,cAAA,0BAEAR,EAAAF,QAAAU,cAAA,6FAEAR,EAAAF,QAAAU,cAAAJ,EAAAN,QAAA,kCAMAE,EAAAF,QAAAU,cAAA,wKAEiER,EAAAF,QAAAU,cAAA,+BAA6B,IAF9F,OAGMR,EAAAF,QAAAU,cAAA,4BAHN,wBAMAR,EAAAF,QAAAU,cAAA,+DAEAR,EAAAF,QAAAU,cAAAJ,EAAAN,QAAA,8PAaAE,EAAAF,QAAAU,cAAA,uEAEAR,EAAAF,QAAAU,cAAAJ,EAAAN,QAAA,wJAUAE,EAAAF,QAAAU,cAAA,gCAEAR,EAAAF,QAAAU,cAAA,OAAKC,UAAU,eACbT,EAAAF,QAAAU,cAAA,OAAKC,UAAU,SACfT,EAAAF,QAAAU,cAAA,OAAKC,UAAU,SACfT,EAAAF,QAAAU,cAAA,OAAKC,UAAU,SACfT,EAAAF,QAAAU,cAAA,OAAKC,UAAU,SACfT,EAAAF,QAAAU,cAAA,OAAKC,UAAU,SACfT,EAAAF,QAAAU,cAAA,OAAKC,UAAU,YAKfC,EAAW,iBACfV,GAAAF,QAAAU,cAAAF,EAAAR,QAAA,KACEE,EAAAF,QAAAU,cAAA,sJAEgDR,EAAAF,QAAAU,cAAA,wBAFhD,qBAGER,EAAAF,QAAAU,cAAA,+BAHF,QAGmCR,EAAAF,QAAAU,cAAA,4BAHnC,kEAOAR,EAAAF,QAAAU,cAAA,iNAMAR,EAAAF,QAAAU,cAAA,uFDoGHf,GAAQK,QChGM,iBAAME,GAAAF,QAAAU,cAAAN,EAAAJ,SAAMa,eAAgB,EAAGC,SAAUZ,EAAAF,QAAAU,cAACD,EAAD,MAAcM,SAAUb,EAAAF,QAAAU,cAACE,EAAD,SDoG/ElB,EAAOC,QAAUA,EAAiB","file":"component---src-pages-02-first-grid-js-411aafdbaae73bba5964.js","sourcesContent":["webpackJsonp([37651121599412],{\n\n/***/ \"./node_modules/babel-loader/lib/index.js?{\\\"plugins\\\":[\\\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js\\\",\\\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-plugin-add-module-exports/lib/index.js\\\",\\\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-plugin-transform-object-assign/lib/index.js\\\"],\\\"presets\\\":[[\\\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-preset-env/lib/index.js\\\",{\\\"loose\\\":true,\\\"uglify\\\":true,\\\"modules\\\":\\\"commonjs\\\",\\\"targets\\\":{\\\"browsers\\\":[\\\"> 1%\\\",\\\"last 2 versions\\\",\\\"IE >= 9\\\"]},\\\"exclude\\\":[\\\"transform-regenerator\\\",\\\"transform-es2015-typeof-symbol\\\"]}],\\\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-preset-stage-0/lib/index.js\\\",\\\"/Users/danbrown/Documents/projects/008_mozilla/playground/node_modules/babel-preset-react/lib/index.js\\\"],\\\"cacheDirectory\\\":true}!./src/pages/02-first-grid.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(\"./node_modules/react/react.js\");\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Main = __webpack_require__(\"./src/components/layout/Main.js\");\n\t\n\tvar _Main2 = _interopRequireDefault(_Main);\n\t\n\tvar _CodeBlock = __webpack_require__(\"./src/components/CodeBlock.js\");\n\t\n\tvar _CodeBlock2 = _interopRequireDefault(_CodeBlock);\n\t\n\tvar _DevHomework = __webpack_require__(\"./src/components/layout/DevHomework.js\");\n\t\n\tvar _DevHomework2 = _interopRequireDefault(_DevHomework);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Tutorial = function Tutorial() {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    null,\n\t    _react2.default.createElement(\n\t      'h2',\n\t      null,\n\t      'Your First Grid'\n\t    ),\n\t    _react2.default.createElement(\n\t      'h4',\n\t      null,\n\t      'Create a grid'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'The first thing we want to do is create a grid container. We can do this by declaring',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'display: grid'\n\t      ),\n\t      ' on the container element. In this example we are using a div with the class of ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'container'\n\t      ),\n\t      '.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'h4',\n\t      null,\n\t      'Define rows and columns'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'There are several ways to define rows and columns. For our first grid, we will use properties',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-template-columns'\n\t      ),\n\t      ' and ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-template-rows'\n\t      ),\n\t      '. These properties allow us to define the size of the rows and columns for our grid. To create three fixed-height rows of 150px and three fixed-width columns of 150px, simply write:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\ngrid-template-columns: 150px 150px 150px;\\ngrid-template-rows: 150px 150px;\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'To add a fourth column that is 70px wide, write:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\ngrid-template-columns: 150px 150px 70px;\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      '...and so on to add more columns.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'h4',\n\t      null,\n\t      'Add a gutter'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Adding a gutter to your grid is amazingly easy with CSS Grid Layout. Simply add:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\ngrid-gap: 1rem;\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'That simple line gives you an equal-sized gutter between all rows and columns. To define the gutter size for columns and rows individually, you can use the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-column-gap'\n\t      ),\n\t      ' ',\n\t      'and ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-row-gap'\n\t      ),\n\t      ' properties instead.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Now let\\'s put that all together. Here is our HTML:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\n<div class=\"container\">\\n  <div class=\"item item1\"></div>\\n  <div class=\"item item2\"></div>\\n  <div class=\"item item3\"></div>\\n  <div class=\"item item4\"></div>\\n  <div class=\"item item5\"></div>\\n  <div class=\"item item5\"></div>\\n</div>\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'With just a few lines of CSS, we can create a simple grid:'\n\t    ),\n\t    _react2.default.createElement(\n\t      _CodeBlock2.default,\n\t      null,\n\t      '\\n.container {\\n  display: grid;\\n  grid-template-columns: 150px 150px 150px;\\n  grid-template-rows: 150px 150px;\\n  grid-gap: 1rem;\\n}\\n      '\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Here is the result:'\n\t    ),\n\t    _react2.default.createElement(\n\t      'div',\n\t      { className: 'container-2' },\n\t      _react2.default.createElement('div', { className: 'item' }),\n\t      _react2.default.createElement('div', { className: 'item' }),\n\t      _react2.default.createElement('div', { className: 'item' }),\n\t      _react2.default.createElement('div', { className: 'item' }),\n\t      _react2.default.createElement('div', { className: 'item' }),\n\t      _react2.default.createElement('div', { className: 'item' })\n\t    )\n\t  );\n\t};\n\t\n\tvar Homework = function Homework() {\n\t  return _react2.default.createElement(\n\t    _DevHomework2.default,\n\t    null,\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Amazing right? Inspect the grid above with your browser\\'s developer tools. Try changing the column width, or the row height. Swap out the ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-gap'\n\t      ),\n\t      ' property with the',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-column-gap'\n\t      ),\n\t      ' and ',\n\t      _react2.default.createElement(\n\t        'code',\n\t        null,\n\t        'grid-row-gap'\n\t      ),\n\t      ' properties and play around with different widths and heights.'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Having a good set of developer tools when working with CSS Grid Layout is essential. Firefox has some fantastic features that are specifically built to help you create and design grids. Intrigued?'\n\t    ),\n\t    _react2.default.createElement(\n\t      'p',\n\t      null,\n\t      'Click to the next section to learn about Firefox\\'s CSS Grid Layout Panel.'\n\t    )\n\t  );\n\t};\n\t\n\texports.default = function () {\n\t  return _react2.default.createElement(_Main2.default, { currentPageNum: 2, tutorial: _react2.default.createElement(Tutorial, null), homework: _react2.default.createElement(Homework, null) });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-02-first-grid-js-411aafdbaae73bba5964.js","import React from 'react';\nimport Main from '../components/layout/Main';\nimport CodeBlock from '../components/CodeBlock';\nimport DevHomework from '../components/layout/DevHomework';\n\nconst Tutorial = () => (\n  <div>\n    <h2>Your First Grid</h2>\n\n    <h4>Create a grid</h4>\n    <p>\n      The first thing we want to do is create a grid container. We can do this by declaring{' '}\n      <code>display: grid</code> on the container element. In this example we are using a div with\n      the class of <code>container</code>.\n    </p>\n\n    <h4>Define rows and columns</h4>\n    <p>\n      There are several ways to define rows and columns. For our first grid, we will use properties\n      <code>grid-template-columns</code> and <code>grid-template-rows</code>. These properties allow\n      us to define the size of the rows and columns for our grid. To create three fixed-height rows\n      of 150px and three fixed-width columns of 150px, simply write:\n    </p>\n\n    <CodeBlock>\n      {`\ngrid-template-columns: 150px 150px 150px;\ngrid-template-rows: 150px 150px;\n      `}\n    </CodeBlock>\n\n    <p>To add a fourth column that is 70px wide, write:</p>\n\n    <CodeBlock>\n      {`\ngrid-template-columns: 150px 150px 70px;\n      `}\n    </CodeBlock>\n\n    <p>...and so on to add more columns.</p>\n\n    <h4>Add a gutter</h4>\n\n    <p>Adding a gutter to your grid is amazingly easy with CSS Grid Layout. Simply add:</p>\n\n    <CodeBlock>\n      {`\ngrid-gap: 1rem;\n      `}\n    </CodeBlock>\n\n    <p>\n      That simple line gives you an equal-sized gutter between all rows and columns. To define the\n      gutter size for columns and rows individually, you can use the <code>grid-column-gap</code>{' '}\n      and <code>grid-row-gap</code> properties instead.\n    </p>\n\n    <p>Now let's put that all together. Here is our HTML:</p>\n\n    <CodeBlock>\n      {`\n<div class=\"container\">\n  <div class=\"item item1\"></div>\n  <div class=\"item item2\"></div>\n  <div class=\"item item3\"></div>\n  <div class=\"item item4\"></div>\n  <div class=\"item item5\"></div>\n  <div class=\"item item5\"></div>\n</div>\n      `}\n    </CodeBlock>\n\n    <p>With just a few lines of CSS, we can create a simple grid:</p>\n\n    <CodeBlock>\n      {`\n.container {\n  display: grid;\n  grid-template-columns: 150px 150px 150px;\n  grid-template-rows: 150px 150px;\n  grid-gap: 1rem;\n}\n      `}\n    </CodeBlock>\n    <p>Here is the result:</p>\n\n    <div className=\"container-2\">\n      <div className=\"item\" />\n      <div className=\"item\" />\n      <div className=\"item\" />\n      <div className=\"item\" />\n      <div className=\"item\" />\n      <div className=\"item\" />\n    </div>\n  </div>\n);\n\nconst Homework = () => (\n  <DevHomework>\n    <p>\n      Amazing right? Inspect the grid above with your browser's developer tools. Try changing the\n      column width, or the row height. Swap out the <code>grid-gap</code> property with the\n      <code>grid-column-gap</code> and <code>grid-row-gap</code> properties and play around with\n      different widths and heights.\n    </p>\n\n    <p>\n      Having a good set of developer tools when working with CSS Grid Layout is essential. Firefox\n      has some fantastic features that are specifically built to help you create and design grids.\n      Intrigued?\n    </p>\n\n    <p>Click to the next section to learn about Firefox's CSS Grid Layout Panel.</p>\n  </DevHomework>\n);\n\nexport default () => <Main currentPageNum={2} tutorial={<Tutorial />} homework={<Homework />} />;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/02-first-grid.js"],"sourceRoot":""}